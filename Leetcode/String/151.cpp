/*反转字符串中的单词*/

#include "../leetcode.h"

string reverseWords(string s) {
    string ans = "";
    int i = s.length() - 1;
    while (i >= 0){
        while(i >= 0 && s[i] == ' ') i--;

        string str = "";
        while(i >= 0 && s[i] != ' ') {
            str += s[i];
            i--;
        }
        if (!str.empty()){
            reverse(str.begin(), str.end());
            if(!ans.empty()) ans += ' ';
            ans += str;
        }
    }
    return ans;
}
/*
核心算法流程
逆序遍历字符串：

从字符串尾部开始扫描，跳过尾部多余的空格，确保只提取有效的单词。
逆序扫描的好处是：可以直接按照输出要求（单词反转顺序）提取单词，省去额外的排序操作。
逐个提取单词：

每次遇到空格时，将当前单词提取出来并存储。
利用双循环（一个跳过空格，一个提取单词），确保精确提取每个单词。
拼接到结果字符串：

每提取一个单词时，将其存储到结果字符串中。
在拼接时，注意添加单词之间的空格，同时避免多余的空格。
翻转单词：

因为单词是从尾部字符逐个添加的（例如，dlrow），需要在拼接之前将单词反转为正常顺序（例如，world）。
去除尾部多余的空格：

为避免多余的空格，拼接时动态检查结果字符串的状态（通过 !ans.empty()）。
*/
